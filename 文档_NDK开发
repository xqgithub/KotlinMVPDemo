Android Studio NDK开发-环境配置
一、NDK
1.NDK全称Native Development Kit
2.NDK提供了一系列的工具，可以帮助开发者在Android平台上面进行c/c++的开发，并能自动将.so打包金apk中
3.NDK集成了交叉编译器，并提供mk文件可以做到隔离CPU,平台以及ABI等差异，只需修改mk文件即可。开发人员只需要简单修改mk文件，就可以创建出适应各平台的.so文件
4.NDK开发就是使用c/c++开发Android应用或者开发Android应用的某一个功能，使用NDK有时是为了调用底层的库,有时是为了c/c++开发带来的应用性能上的提高

二、使用流程
1.在main文件夹中创建cpp文件夹，cpp中创建CMakeLists.txt

2.编写CMakeLists.txt最常用的功能就是调用其他的.h头文件和.so/.a库文件，将.cpp/.c/.cc文件编译成可执行文件或者新的库文件

3.创建一个native-lib.cpp文件
里面方法是kotlin要去调用的，编写规则是Java_com_example_kotlinmvpdemo_ndk_nativelib_stringFromJNI
(1)com_example_kotlinmvpdemo_ndk_nativelib 路径
(2)stringFromJNI 方法名

4.在nativelib类中
(1)初始化加载动态库native-lib.so文件
    companion object {
        // Used to load the 'native-lib' library on application startup.
        init {
            System.loadLibrary("native-lib")
        }
    }
(2)Java 中使用 native 声明 ndk 方法 , 在 Kotlin 中 , 使用 external 声明 ndk 方法
external fun stringFromJNI(): String

5.模块build.gradle中配置

android{
...

defaultConfig{
...

        externalNativeBuild {
            cmake {
                cppFlags ""
                //生成一下文件夹中的so文件，生成的文件路径：build/intermediates/cmake/debug/.....
                abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
            }
        }

...

}

    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.10.2"
        }
    }

...
}

==================================================== 分割线 ====================================================
Android Studio NDK开发-C语言--基本数据类型
一.C语言的数据类型
1.基本类型
(1).数值类型
a.整型
a1.整型short
a2.整型int
a3.长整型long
b.浮点型
b1.单精度型 float
b2.双精度型 double

(2).字符类型 char

2.构造类型
(1).数组
(2).结构体 struct
(3).公用体 union
(4).枚举类型 enum

3. 指针类型

4.空类型void

二.short、int、long、char、float、double 这六个关键字代表C 语言里的六种基本数据类型
1.格式化输出
(1) int %d
(2) short %d
(3) long %ld
(4) float %f
(5) double %lf
(6) char %c

2.进制输出
(1) %x 十六进制
(2) %o 八进制
(3) %s 字符串
(4) %p一般以十六进制整数方式输出指针的值，附加前缀0x

3.字符占位大小
(1) 在32 位的系统上short 咔出来的内存大小是2 个byte；
(2) int 咔出来的内存大小是4 个byte；
(3) long 咔出来的内存大小是4 个byte；
(4) float 咔出来的内存大小是4 个byte；
(5) double 咔出来的内存大小是8 个byte；
(6) char 咔出来的内存大小是1 个byte。
ps:注意这里指一般情况，可能不同的平台还会有所不同，具体平台可以用sizeof 关键字测试一下

测试方法：testbasictype



==================================================== 分割线 ====================================================
Android Studio NDK开发-C语言--指针
一.前言
1. 通过指针，可以简化一些 C 编程任务的执行，还有一些任务，如动态内存分配，没有指针是无法执行的
2. 每一个变量都有一个内存位置，每一个内存位置都定义了可使用连字号（&）运算符访问的地址，它表示了在内存中的一个地址

二.指针的定义
1.指针是一个变量,其值为另一个变量的地址，内存位置的直接地址
2.就像其它变量或常量一样，您必须在使用指针存储其它变量地址之前，对其进行声明。指针变量声明的一般形式为：type *var-name;
3.有效的指针声明
(1).int    *ip;    /* 一个整型的指针 */
(2).double *dp;    /* 一个 double 型的指针 */
(3).float  *fp;    /* 一个浮点型的指针 */
(4).char   *ch;     /* 一个字符型的指针 */

三.如何使用指针
 1. 定义一个指针变量、把变量地址赋值给指针、访问指针变量中可用地址的值
 2. 通过使用一元运算符 * 来返回位于操作数所指定地址的变量的值
 3. C 中的 NULL 指针 在变量声明的时候，如果没有确切的地址可以赋值，为指针变量赋一个 NULL 值是一个良好的编程习惯。赋为 NULL 值的指针被称为空指针。 NULL 指针是一个定义在标准库中的值为零的常量
 4. 指针有类型，地址没有类型，地址只是开始的位置，类型大小决定读取到什么位置结束
 5. 多级指针，动态内存分配二维数组，操作数组的时候
 6. 指针运算（加减法）（与数组的操作相结合）
 7. 函数指针
 (1).函数指针是指向函数的指针变量,函数指针是指向函数
 (2).函数指针可以像一般函数一样，用于调用函数、传递参数
 (3).typedef int (*fun_ptr)(int,int); // 声明一个指向同样参数、返回值的函数指针类型
 8.回调函数，函数指针作为某个函数的参数


==================================================== 分割线 ====================================================